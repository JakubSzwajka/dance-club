# Generated by Django 5.1.5 on 2025-01-25 22:30

import django.core.validators
import django.db.models.deletion
import mydanceclub.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=mydanceclub.models.generate_uuid,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "google_place_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("address", models.CharField(max_length=500)),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                ("url", models.URLField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RecurringSchedule",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=mydanceclub.models.generate_uuid,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "day_of_week",
                    models.IntegerField(
                        choices=[
                            (0, "Monday"),
                            (1, "Tuesday"),
                            (2, "Wednesday"),
                            (3, "Thursday"),
                            (4, "Friday"),
                            (5, "Saturday"),
                            (6, "Sunday"),
                        ]
                    ),
                ),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[("active", "Active"), ("cancelled", "Cancelled")],
                        default="active",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "ordering": ["day_of_week", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="SpecialEvent",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=mydanceclub.models.generate_uuid,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("datetime", models.DateTimeField()),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="event_images/"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "instructor",
                    models.ForeignKey(
                        limit_choices_to={"role": "instructor"},
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="classes.location",
                    ),
                ),
            ],
            options={
                "ordering": ["datetime"],
            },
        ),
        migrations.CreateModel(
            name="SpecialSchedule",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=mydanceclub.models.generate_uuid,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("rescheduled", "Rescheduled"),
                            ("cancelled", "Cancelled"),
                            ("extra", "Extra Class"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                (
                    "replaced_schedule_date",
                    models.DateField(
                        blank=True,
                        help_text="The specific date of the recurring schedule being replaced",
                        null=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="For explaining why this special schedule exists",
                        null=True,
                    ),
                ),
                (
                    "replaced_schedule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="classes.recurringschedule",
                    ),
                ),
            ],
            options={
                "ordering": ["date", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="DanceClass",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=mydanceclub.models.generate_uuid,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "style",
                    models.CharField(
                        choices=[
                            ("ballroom", "Ballroom"),
                            ("latin", "Latin"),
                            ("salsa", "Salsa"),
                            ("tango", "Tango"),
                            ("other", "Other"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "max_capacity",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("current_capacity", models.IntegerField(default=0)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                (
                    "instructor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="classes.location",
                    ),
                ),
                (
                    "recurring_schedules",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dance_classes",
                        to="classes.recurringschedule",
                    ),
                ),
                (
                    "special_schedules",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dance_classes",
                        to="classes.specialschedule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Dance Class",
                "verbose_name_plural": "Dance Classes",
                "db_table": "dance_classes",
            },
        ),
        migrations.CreateModel(
            name="EventParticipant",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=mydanceclub.models.generate_uuid,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("registered_at", models.DateTimeField(auto_now_add=True)),
                ("attended", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_participations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="classes.specialevent",
                    ),
                ),
            ],
            options={
                "ordering": ["registered_at"],
                "unique_together": {("event", "user")},
            },
        ),
    ]
