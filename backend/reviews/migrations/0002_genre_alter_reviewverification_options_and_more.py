# Generated by Django 5.1.5 on 2025-02-02 09:26

import django.core.validators
import django.db.models.deletion
import mydanceclub.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("classes", "0002_remove_danceclass_recurring_schedules_and_more"),
        ("reviews", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=mydanceclub.models.generate_uuid,
                        max_length=36,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    models.CharField(
                        help_text="Unique identifier for the genre",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name of the genre", max_length=100
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this genre is currently in use"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.AlterModelOptions(
            name="reviewverification",
            options={
                "verbose_name": "Review Verification",
                "verbose_name_plural": "Review Verifications",
            },
        ),
        migrations.RemoveField(
            model_name="facilitiesreview",
            name="has_waiting_area",
        ),
        migrations.AddField(
            model_name="facilitiesreview",
            name="waiting_area_available",
            field=models.BooleanField(
                default=False,
                help_text="Indicates whether a dedicated waiting area is available",
            ),
        ),
        migrations.AlterField(
            model_name="environmentreview",
            name="crowdedness",
            field=models.IntegerField(
                help_text="Rating (1-5) of space availability per student, where 1 indicates very crowded and 5 indicates optimal space",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="environmentreview",
            name="floor_quality",
            field=models.IntegerField(
                help_text="Rating (1-5) of the dance floor quality, considering factors like grip, smoothness, and maintenance",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="environmentreview",
            name="temperature",
            field=models.CharField(
                choices=[("cool", "Cool"), ("moderate", "Moderate"), ("warm", "Warm")],
                default="moderate",
                help_text="General temperature condition of the dance space during class",
                max_length=20,
            ),
        ),
        migrations.AlterField(
            model_name="environmentreview",
            name="ventilation",
            field=models.IntegerField(
                help_text="Rating (1-5) of air circulation and freshness in the dance space",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="facilitiesreview",
            name="accepted_cards",
            field=models.JSONField(
                default=list,
                help_text="List of accepted sports/benefits cards. Valid options are: 'multisport' (MultiSport), 'medicover' (Medicover Sport), 'ok_system' (OK System), 'benefit' (Benefit Systems), 'fitprofit' (FitProfit)",
            ),
        ),
        migrations.AlterField(
            model_name="facilitiesreview",
            name="changing_room_notes",
            field=models.TextField(
                blank=True,
                help_text="Additional notes about changing room facilities (e.g., lockers, showers)",
            ),
        ),
        migrations.AlterField(
            model_name="facilitiesreview",
            name="changing_room_quality",
            field=models.IntegerField(
                blank=True,
                help_text="Rating (1-5) of changing room facilities. Only applicable if changing room is available",
                null=True,
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="facilitiesreview",
            name="has_changing_room",
            field=models.BooleanField(
                default=False,
                help_text="Indicates whether a dedicated changing room is available",
            ),
        ),
        migrations.AlterField(
            model_name="facilitiesreview",
            name="has_seating",
            field=models.BooleanField(
                default=False,
                help_text="Indicates whether seating is available in the waiting area",
            ),
        ),
        migrations.AlterField(
            model_name="facilitiesreview",
            name="waiting_area_notes",
            field=models.TextField(
                blank=True, help_text="Additional notes about waiting area amenities"
            ),
        ),
        migrations.AlterField(
            model_name="facilitiesreview",
            name="waiting_area_type",
            field=models.CharField(
                blank=True,
                choices=[
                    ("indoor", "Indoor"),
                    ("outdoor", "Outdoor"),
                    ("both", "Both"),
                ],
                help_text="Type of waiting area provided. Only applicable if waiting area is available",
                max_length=20,
                null=True,
            ),
        ),
        migrations.RemoveField(
            model_name="musicreview",
            name="genres",
        ),
        migrations.AlterField(
            model_name="musicreview",
            name="style",
            field=models.IntegerField(
                help_text="Slider position indicating music style: 0 represents traditional/classical dance music, while 100 represents modern/contemporary interpretations",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="musicreview",
            name="volume_level",
            field=models.IntegerField(
                help_text="Rating (1-5) of the music volume appropriateness, where 3 is optimal",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="anonymous_name",
            field=models.CharField(
                blank=True,
                help_text="Display name for anonymous reviews. Required if user is not provided",
                max_length=100,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="comment",
            field=models.TextField(
                help_text="General comments and observations about the dance class experience"
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="dance_class",
            field=models.ForeignKey(
                help_text="The dance class being reviewed",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reviews",
                to="classes.danceclass",
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="environment",
            field=models.OneToOneField(
                help_text="Review of the physical dance environment",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="reviews.environmentreview",
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="facilities",
            field=models.OneToOneField(
                help_text="Review of the supporting facilities and amenities",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="reviews.facilitiesreview",
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="is_verified",
            field=models.BooleanField(
                default=False,
                help_text="Indicates whether the review has been verified by staff",
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="music",
            field=models.OneToOneField(
                help_text="Review of the music and audio experience",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="reviews.musicreview",
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="overall_rating",
            field=models.IntegerField(
                help_text="Overall rating (1-5) for the dance class experience",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="teaching_approach",
            field=models.OneToOneField(
                help_text="Detailed review of the teaching methodology",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="reviews.teachingapproachreview",
            ),
        ),
        migrations.AlterField(
            model_name="review",
            name="user",
            field=models.ForeignKey(
                blank=True,
                help_text="The user submitting the review. Can be null for anonymous reviews",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reviews",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="reviewverification",
            name="review",
            field=models.OneToOneField(
                help_text="The review being verified",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="verification",
                to="reviews.review",
                verbose_name="Verified Review",
            ),
        ),
        migrations.AlterField(
            model_name="reviewverification",
            name="verification_date",
            field=models.DateTimeField(
                auto_now_add=True,
                help_text="Date and time when the review was verified",
                verbose_name="Verification Date",
            ),
        ),
        migrations.AlterField(
            model_name="reviewverification",
            name="verification_method",
            field=models.CharField(
                choices=[
                    ("attendance", "Class Attendance"),
                    ("purchase", "Purchase History"),
                    ("manual", "Manual Verification"),
                ],
                help_text="Method used to verify the review. 'Class Attendance' indicates verification through attendance records, 'Purchase History' through payment records, and 'Manual Verification' through staff investigation.",
                max_length=50,
                verbose_name="Verification Method",
            ),
        ),
        migrations.AlterField(
            model_name="reviewverification",
            name="verification_notes",
            field=models.TextField(
                blank=True,
                help_text="Additional notes about the verification process, including any specific checks performed or reasons for the verification decision.",
                verbose_name="Verification Notes",
            ),
        ),
        migrations.AlterField(
            model_name="reviewverification",
            name="verified_by",
            field=models.ForeignKey(
                help_text="Staff member who performed the verification",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="verified_reviews",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Verified By",
            ),
        ),
        migrations.AlterField(
            model_name="teachingapproachreview",
            name="breakdown_quality",
            field=models.IntegerField(
                help_text="Rating (1-5) for how effectively the instructor breaks down and explains complex dance moves",
                validators=[
                    django.core.validators.MinValueValidator(1),
                    django.core.validators.MaxValueValidator(5),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="teachingapproachreview",
            name="feedback_approach",
            field=models.IntegerField(
                help_text="Slider position indicating feedback style: 0 represents primarily verbal instructions and corrections, while 100 represents hands-on adjustments and demonstrations",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="teachingapproachreview",
            name="pace_of_teaching",
            field=models.IntegerField(
                help_text="Slider position indicating teaching pace: 0 represents a methodical, step-by-step approach, while 100 represents a faster-paced, intensive learning style",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="teachingapproachreview",
            name="teaching_style",
            field=models.IntegerField(
                help_text="Slider position indicating teaching style: 0 represents a highly structured approach with set routines and patterns, while 100 represents a more casual, freestyle approach",
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100),
                ],
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["is_verified", "-created_at"],
                name="reviews_rev_is_veri_082be3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["overall_rating", "-created_at"],
                name="reviews_rev_overall_a3fab5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["dance_class", "is_verified"],
                name="reviews_rev_dance_c_425324_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="review",
            index=models.Index(
                fields=["dance_class", "overall_rating"],
                name="reviews_rev_dance_c_4776c9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="reviewverification",
            index=models.Index(
                fields=["verification_method", "-verification_date"],
                name="reviews_rev_verific_d893e6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="reviewverification",
            index=models.Index(
                fields=["verified_by", "-verification_date"],
                name="reviews_rev_verifie_a82dee_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="review",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user__isnull", False)),
                fields=("dance_class", "user"),
                name="unique_user_review_per_class",
            ),
        ),
        migrations.AddIndex(
            model_name="genre",
            index=models.Index(fields=["code"], name="reviews_gen_code_b06ef0_idx"),
        ),
        migrations.AddIndex(
            model_name="genre",
            index=models.Index(
                fields=["is_active", "name"], name="reviews_gen_is_acti_1420bb_idx"
            ),
        ),
        migrations.AddField(
            model_name="musicreview",
            name="genres",
            field=models.ManyToManyField(
                help_text="Music genres used in class",
                related_name="music_reviews",
                to="reviews.genre",
            ),
        ),
    ]
