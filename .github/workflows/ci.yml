name: CI

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'web/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'web/**'
      - '.github/workflows/**'

jobs:
  backend:
    name: 🏗️ Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: 0.5.29
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: './backend/pyproject.toml'

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Run linting
        run: | 
          pwd
          ls
          make ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          working-directory: ./backend

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          working-directory: ./backend
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          working-directory: ./backend
          push: false
          load: true
          tags: my-dance-club-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Test container
        run: |
          docker run --name backend-test -d my-dance-club-backend:latest
          # Wait for container to be healthy
          sleep 10
          # Check if container is still running
          docker ps | grep backend-test
          # Get container logs
          docker logs backend-test

  web:
    name: 🎨 Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: pnpm run lint

      - name: Check formatting
        run: pnpm run format:check

      - name: Type check
        run: pnpm run tsc -b

      - name: Build
        run: pnpm run build 